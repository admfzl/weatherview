# Docker Compose for WeatherView
# Complete stack with database and application

version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: weatherview-db
    environment:
      POSTGRES_DB: weatherview
      POSTGRES_USER: weatherview
      POSTGRES_PASSWORD: ${DB_PASSWORD:-weatherview123}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - weatherview-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U weatherview"]
      interval: 10s
      timeout: 5s
      retries: 5

  # WeatherView Application
  app:
    build:
      context: ../..
      dockerfile: deployment/docker/Dockerfile
    container_name: weatherview-app
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://weatherview:${DB_PASSWORD:-weatherview123}@postgres:5432/weatherview
      PORT: 3000
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - weatherview-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/weather/current || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache (Optional)
  redis:
    image: redis:7-alpine
    container_name: weatherview-redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - weatherview-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  weatherview-network:
    driver: bridge